<?php

/**
 * @file
 * Provides currency information and allows users to add custom currencies.
 */

use BartFeenstra\Currency\AmountInvalidDecimalSeparatorException;
use BartFeenstra\Currency\AmountNotNumericException;
use BartFeenstra\Currency\Input;

require_once __DIR__ . '/vendor/autoload.php';

/**
 * The default locale.
 */
define('CURRENCY_DEFAULT_LOCALE', 'en_US');

/**
 * Implements hook_hook_info().
 */
function currency_hook_info() {
  $hooks['currency_converter_info'] = array(
    'group' => 'currency',
  );
  $hooks['currency_info'] = array(
    'group' => 'currency',
  );
  $hooks['currency_info_alter'] = array(
    'group' => 'currency',
  );
  $hooks['currency_locale_pattern_info'] = array(
    'group' => 'currency',
  );
  $hooks['currency_locale_pattern_info_alter'] = array(
    'group' => 'currency',
  );

  return $hooks;
}

/**
 * Implements hook_element_info().
 */
function currency_element_info() {
  // An element to collect an amount of money and convert it to a float.
  $elements['currency_amount'] = array(
    '#input' => TRUE,
    '#process' => array('currency_form_currency_amount_process'),
    '#element_validate' => array('currency_form_currency_amount_validate'),
    // The minimum amount as a float, or FALSE to omit.
    '#minimum_amount' => FALSE,
    // The maximum amount as a float, or FALSE to omit.
    '#maximum_amount' => FALSE,
    // The ISO 4217 code of the currency the amount should be in. Use FALSE to
    // let users choose.
    '#currency_code' => FALSE,
  );

  return $elements;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function currency_ctools_plugin_type() {
  $plugins_types['currency_converter'] = array(
    'classes' => array('converter'),
    'defaults' => array(
      'weight' => 0,
    ),
    'hook' => 'currency_converter_info',
    'use hooks' => TRUE,
  );

  return $plugins_types;
}

/**
 * Implements Ctools exportables save callback.
 */
function currency_ctools_export_object_save(CurrencyExportableInterface $exportable) {
  $exportable->validate();
  $exportable->export_type = $exportable->export_type | EXPORT_IN_DATABASE;
  $schema = drupal_get_schema($exportable->table);
    $fields = array();
  foreach ($schema['fields'] as $field => $info) {
    if (property_exists($exportable, $field)) {
      $fields[$field] = $exportable->$field;
    }
  }
  $primary_key = $schema['primary key'][0];

  return db_merge($exportable->table)
    ->key(array(
      $primary_key => $exportable->$primary_key,
    ))
    ->fields($fields)
    ->execute();
}

/**
 * Implements form process callback for a currency_amount element.
 */
function currency_form_currency_amount_process(array $element, array &$form_state, array &$form) {
  // Validate element configuration.
  if ($element['#minimum_amount'] !== FALSE && !is_numeric($element['#minimum_amount'])) {
    throw new Exception(t('The minimum amount must be a decimal number.'));
  }
  if ($element['#maximum_amount'] !== FALSE && !is_numeric($element['#maximum_amount'])) {
    throw new Exception(t('The maximum amount must be a decimal number.'));
  }
  ctools_include('export');
  $currency = FALSE;
  if ($element['#currency_code'] !== FALSE) {
    $currency = ctools_export_crud_load('currency', $element['#currency_code']);
    if (!$currency) {
      throw new Exception(t('A valid ISO 4217 currency code needs to be set.'));
    }
  }
  else {
    $currency = ctools_export_crud_load('currency', 'XXX');
  }

  // Modify the element.
  $element['#tree'] = TRUE;
  $element['#theme_wrappers'][] = 'form_element';
  $element['#attached']['css'] = array(
    drupal_get_path('module', 'currency') . '/currency.css',
  );

  // Add the currency element.
  if ($element['#currency_code']) {
    $element['currency_code'] = array(
      '#type' => 'value',
      '#value' => $currency->ISO4217Code,
    );
    $element['currency_code_title'] = array(
      '#type' => 'item',
      '#title' => t('Currency'),
      '#title_display' => 'invisible',
      '#markup' => $currency->title,
    );
  }
  else {
    $element['currency_code'] = array(
      '#type' => 'select',
      '#title' => t('Currency'),
      '#title_display' => 'invisible',
      '#options' => currency_options(),
      '#required' => $element['#required'],
      '#default_value' => 'XXX',
    );
  }

  // Add the amount element.
  $description = NULL;
  if ($element['#minimum_amount'] !== FALSE) {
    $description = t('The minimum amount is !amount.', array(
      '!amount' => $currency->format($element['#minimum_amount']),
    ));
  }
  $element['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#title_display' => 'invisible',
    '#description' => $description,
    '#required' => $element['#required'],
    '#size' => 9,
  );

  return $element;
}

/**
 * Implements form validate callback for a currency_amount element.
 */
function currency_form_currency_amount_validate(array $element, array &$form_state) {
  $value = $element['#value'];
  $amount = $value['amount'];
  $currency_code = $value['currency_code'];

  try {
    $amount = Input::parseAmount($amount);
  }
  catch (AmountInvalidDecimalSeparatorException $e) {
    form_error($element['amount'], t('The amount can only have no or one decimal separator and it must be one of %decimal_separators.', array(
     '%decimal_separators' => implode(Input::$decimalSeparators),
    )));
  }
  catch (AmountNotNumericException $e) {
    form_error($element['amount'], t('The amount can only consist of a minus sign, decimals and one decimal mark.'));
  }

  // Confirm the amount lies within the allowed range.
  $currency = ctools_export_crud_load('currency', $currency_code);
  if ($element['#minimum_amount'] !== FALSE && $amount < $element['#minimum_amount']) {
    form_error($element['amount'], t('The minimum amount is !amount.', array(
      '!amount' => $currency->format($element['#minimum_amount']),
    )));
  }
  elseif ($element['#maximum_amount'] !== FALSE && $amount > $element['#maximum_amount']) {
    form_error($element['amount'], t('The maximum amount is !amount.', array(
      '!amount' => $currency->format($element['#maximum_amount']),
    )));
  }

  // The amount in $form_state is a human-readable, optionally localized
  // string, which cannot be used by other code. $amount is a float after
  // running it through Input::parseAmount().
  form_set_value($element, array(
    'amount' => $amount,
    'currency_code' => $currency_code,
  ), $form_state);
}

/**
 * Returns an options list of currencies.
 *
 * @return array
 *  Keys are ISO 4217 codes and values are currency titles.
 */
function currency_options() {
  $options = array();
  foreach (ctools_export_crud_load_all('currency') as $currency) {
    if ($currency->title) {
      $options[$currency->ISO4217Code] = t('@currency_title (@currency_code)', array(
        '@currency_title' => $currency->title,
        '@currency_code' => $currency->ISO4217Code,
      ));
    }
  }
  asort($options);

  return $options;
}
