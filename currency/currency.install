<?php

/**
 * @file
 * Installation and uninstallation functionality.
 */

/**
 * Implements hook_requirements().
 */
function currency_requirements($phase) {
  $loaded = extension_loaded('BCMath');
  $requirements['currency_extension_bcmath'] = array(
    'title' => t('PHP BCMath extension'),
    'value' => $loaded ? t('Loaded') : t('Not loaded'),
    'severity' => $loaded ? REQUIREMENT_OK : REQUIREMENT_ERROR,
  );

  return $requirements;
}

/**
 * Implements hook_install().
 */
function currency_install() {
  // Disable obsolete currencies by default.
  $currencies = entity_load_multiple('currency');
  foreach ($currencies as $currency) {
    if ($currency->isObsolete()) {
      $currency->disable();
      $currency->save();
    }
  }
}

/**
 * Sets all primary keys to not null.
 */
function currency_update_7200(array &$sandbox) {
  db_change_field('currency_locale_pattern', 'locale', 'locale', array(
    'not null' => TRUE,
    'length' => 5,
    'type' => 'varchar',
  ));
}

/**
 * Upgrades \Drupal\currency\Plugin\currency\exchanger\Delegator configuration.
 */
function currency_update_8300(array &$sandbox) {
  update_variables_to_config('currency.exchange_delegator', array(
    'currency_exchanger' => 'exchangers',
  ));
}

/**
 * Upgrades \Drupal\currency\Plugin\currency\exchanger\FixedRates
 * configuration.
 */
function currency_update_8301(array &$sandbox) {
  $config = \Drupal::config('currency.exchanger.fixed_rates');
  $rates = $config->get('rates');
  $rates_data = db_select('currency_exchanger_fixed_rates', 'cefr')
    ->fields('cefr')
    ->execute();
  foreach ($rates_data as $rate_data) {
    $rates[$rate_data->currency_code_from][$rate_data->currency_code_to] = $rate_data->rate;
  }
  $config->set('rates', $rates);
  $config->save();
  db_drop_table('currency_exchanger_fixed_rates');
}

/**
 * Upgrades currencies.
 */
function currency_update_8302(array &$sandbox) {
  $currencies_data = db_select('currency', 'c')
    ->fields('c')
    ->execute();
  foreach ($currencies_data as $currency_data) {
    // Create a currency entity, or alter an existing one with the same code.
    $currency = entity_load('currency', $currency_data->ISO4217Code);
    if (!$currency) {
      $currency = entity_create('currency');
      $currency->setCurrencyCode($currency_data->ISO4217Code);
    }

    // Update the entity with the old data.
    // @todo Find out how to migrate translated titles.
    $currency->setCurrencyNumber($currency_data->ISO4217Number);
    $currency->setLabel($currency_data->title);
    $currency->setRoundingStep($currency_data->rounding_step);
    $currency->setSign($currency_data->sign);
    $currency->setSubunits($currency_data->subunits);

    $currency->save();
  }
  db_drop_table('currency');
}

/**
 * Upgrades currency locale patterns.
 */
function currency_update_8303(array &$sandbox) {
  $currencies_data = db_select('currency_locale_pattern', 'clp')
    ->fields('clp')
    ->execute();
  foreach ($locale_patterns_data as $locale_pattern_data) {
    // Create a locale pattern entity, or alter an existing one with the same
    // locale.
    $locale_pattern = entity_load('currency_locale_pattern', $locale_pattern_data->locale);
    if (!$locale_pattern) {
      $locale_pattern = entity_create('currency_locale_pattern');
      $locale_pattern->locale = $locale_pattern_data->locale;
    }

    // Update the entity with the old data.
    $locale_pattern->setPattern($currency_data->pattern);
    $currency->setDecimalSeparator($currency_data->symbol_decimal_separator);
    $currency->setGroupingSeparator($currency_data->symbol_grouping_separator);
    $currency->setSign($currency_data->sign);
    $currency->setSubunits($currency_data->subunits);

    $currency->save();
  }
  db_drop_table('currency_locale_pattern');
}
