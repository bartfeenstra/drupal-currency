<?php

/**
 * @file
 * Provides currency information and allows users to add custom currencies.
 */

use BartFeenstra\Currency\AmountInvalidDecimalSeparatorException;
use BartFeenstra\Currency\AmountNotNumericException;
use BartFeenstra\Currency\Input;

require_once __DIR__ . '/vendor/autoload.php';

/**
 * The default locale.
 */
define('CURRENCY_DEFAULT_LOCALE', 'en_US');

/**
 * The value for the currency_sign form element's "custom" option.
 */
define('CURRENCY_SIGN_FORM_ELEMENT_CUSTOM_VALUE', '###CUSTOM###');

/**
 * Implements hook_hook_info().
 */
function currency_hook_info() {
  $hooks['currency_converter_info'] = array(
    'group' => 'currency',
  );
  $hooks['currency_info'] = array(
    'group' => 'currency',
  );
  $hooks['currency_info_alter'] = array(
    'group' => 'currency',
  );
  $hooks['currency_locale_pattern_info'] = array(
    'group' => 'currency',
  );
  $hooks['currency_locale_pattern_info_alter'] = array(
    'group' => 'currency',
  );

  return $hooks;
}

/**
 * Implements hook_menu_alter().
 */
function currency_menu_alter(array &$items) {
  $items['admin/config/regional/currency/list']['title'] = t('Currencies');
  $items['admin/config/regional/currency/currency_locale_pattern']['type'] = MENU_LOCAL_TASK;
}

/**
 * Implements hook_element_info().
 */
function currency_element_info() {
  // An element to collect an amount of money and convert it to a float.
  $elements['currency_amount'] = array(
    '#input' => TRUE,
    '#process' => array('currency_form_currency_amount_process'),
    '#element_validate' => array('currency_form_currency_amount_validate'),
    // The minimum amount as a float, or FALSE to omit.
    '#minimum_amount' => FALSE,
    // The maximum amount as a float, or FALSE to omit.
    '#maximum_amount' => FALSE,
    // The ISO 4217 code of the currency the amount should be in. Use FALSE to
    // let users choose.
    '#currency_code' => FALSE,
  );
  // A locale selector. Returns a string in the format of xx_ZZ.
  $elements['currency_locale'] = array(
    '#input' => TRUE,
    '#process' => array('currency_form_currency_locale_process'),
    '#element_validate' => array('currency_form_currency_locale_validate'),
  );
  // An element to set a currency sign.
  $elements['currency_sign'] = array(
    '#input' => TRUE,
    '#process' => array('currency_form_currency_sign_process'),
    '#element_validate' => array('currency_form_currency_sign_validate'),
    // The ISO 4217 code of the currency which signs to suggest to the user.
    // Optional.
    '#currency_code' => FALSE,
  );

  return $elements;
}

/**
 * Implements hook_permission().
 */
function currency_permission() {
  $permissions['currency.currency.administer'] = array(
    'title' => t('Administer currencies'),
  );
  $permissions['currency.currency_locale_pattern.administer'] = array(
    'title' => t('Administer currency locale patterns'),
  );

  return $permissions;
}

/**
 * Implements hook_filter_info().
 */
function currency_filter_info() {
  // Use "currency_exchange" as the machine name for backwards compatibility
  // with Currency 7.x-1.x.
  $filters['currency_exchange'] = array(
    'process callback' => 'currency_filter_currency_exchange_process',
    'title' => t('Currency conversion'),
    'tips callback' => 'currency_filter_currency_exchange_tips',
  );
  $filters['currency_localize'] = array(
    'cache' => FALSE,
    'process callback' => 'currency_filter_currency_localize_process',
    'tips callback' => 'currency_filter_currency_localize_tips',
    'title' => t('Currency amount formatting'),
  );

  return $filters;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function currency_ctools_plugin_type() {
  $plugins_types['currency_converter'] = array(
    'classes' => array('converter'),
    'defaults' => array(
      'weight' => 0,
    ),
    'hook' => 'currency_converter_info',
    'use hooks' => TRUE,
  );

  return $plugins_types;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function currency_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'ctools/plugins/' . $plugin;
  }
}

/**
 * Implements Ctools exportables save callback.
 */
function currency_ctools_export_object_save(CurrencyExportableInterface $exportable) {
  $exportable->validate();
  $exportable->export_type = $exportable->export_type | EXPORT_IN_DATABASE;
  $schema = drupal_get_schema($exportable->table);
    $fields = array();
  foreach ($schema['fields'] as $field => $info) {
    if (property_exists($exportable, $field)) {
      $fields[$field] = $exportable->$field;
    }
  }
  $primary_key = $schema['primary key'][0];

  return db_merge($exportable->table)
    ->key(array(
      $primary_key => $exportable->$primary_key,
    ))
    ->fields($fields)
    ->execute();
}

/**
 * Implements form process callback for a currency_amount element.
 */
function currency_form_currency_amount_process(array $element, array &$form_state, array &$form) {
  // Validate element configuration.
  if ($element['#minimum_amount'] !== FALSE && !is_numeric($element['#minimum_amount'])) {
    throw new Exception(t('The minimum amount must be a decimal number.'));
  }
  if ($element['#maximum_amount'] !== FALSE && !is_numeric($element['#maximum_amount'])) {
    throw new Exception(t('The maximum amount must be a decimal number.'));
  }
  ctools_include('export');
  $currency = FALSE;
  if ($element['#currency_code'] !== FALSE) {
    $currency = ctools_export_crud_load('currency', $element['#currency_code']);
    if (!$currency) {
      throw new Exception(t('A valid ISO 4217 currency code needs to be set.'));
    }
  }
  else {
    $currency = ctools_export_crud_load('currency', 'XXX');
  }

  // Modify the element.
  $element['#tree'] = TRUE;
  $element['#theme_wrappers'][] = 'form_element';
  $element['#attached']['css'] = array(
    drupal_get_path('module', 'currency') . '/currency.css',
  );

  // Add the currency element.
  if ($element['#currency_code']) {
    $element['currency_code'] = array(
      '#type' => 'value',
      '#value' => $currency->ISO4217Code,
    );
    $element['currency_code_title'] = array(
      '#type' => 'item',
      '#title' => t('Currency'),
      '#title_display' => 'invisible',
      '#markup' => $currency->title,
    );
  }
  else {
    $element['currency_code'] = array(
      '#type' => 'select',
      '#title' => t('Currency'),
      '#title_display' => 'invisible',
      '#options' => currency_options(),
      '#required' => $element['#required'],
      '#default_value' => 'XXX',
    );
  }

  // Add the amount element.
  $description = NULL;
  if ($element['#minimum_amount'] !== FALSE) {
    $description = t('The minimum amount is !amount.', array(
      '!amount' => $currency->format($element['#minimum_amount']),
    ));
  }
  $element['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#title_display' => 'invisible',
    '#description' => $description,
    '#required' => $element['#required'],
    '#size' => 9,
  );

  return $element;
}

/**
 * Implements form validate callback for a currency_amount element.
 */
function currency_form_currency_amount_validate(array $element, array &$form_state) {
  $value = $element['#value'];
  $amount = $value['amount'];
  $currency_code = $value['currency_code'];

  try {
    $amount = Input::parseAmount($amount);
  }
  catch (AmountInvalidDecimalSeparatorException $e) {
    form_error($element['amount'], t('The amount can only have no or one decimal separator and it must be one of %decimal_separators.', array(
     '%decimal_separators' => implode(Input::$decimalSeparators),
    )));
  }
  catch (AmountNotNumericException $e) {
    form_error($element['amount'], t('The amount can only consist of a minus sign, decimals and one decimal mark.'));
  }

  // Confirm the amount lies within the allowed range.
  $currency = ctools_export_crud_load('currency', $currency_code);
  if ($element['#minimum_amount'] !== FALSE && $amount < $element['#minimum_amount']) {
    form_error($element['amount'], t('The minimum amount is !amount.', array(
      '!amount' => $currency->format($element['#minimum_amount']),
    )));
  }
  elseif ($element['#maximum_amount'] !== FALSE && $amount > $element['#maximum_amount']) {
    form_error($element['amount'], t('The maximum amount is !amount.', array(
      '!amount' => $currency->format($element['#maximum_amount']),
    )));
  }

  // The amount in $form_state is a human-readable, optionally localized
  // string, which cannot be used by other code. $amount is a float after
  // running it through Input::parseAmount().
  form_set_value($element, array(
    'amount' => $amount,
    'currency_code' => $currency_code,
  ), $form_state);
}

/**
 * Implements form process callback for a currency_sign element.
 */
function currency_form_currency_sign_process(array $element, array &$form_state, array &$form) {
  $currency = FALSE;
  if ($element['#currency_code']) {
    $currency = BartFeenstra\Currency\Currency::resourceLoad($element['#currency_code']);
    if (!$currency) {
      throw new Exception(t('A valid ISO 4217 currency code needs to be set.'));
    }
  }
  else {
    $currency = BartFeenstra\Currency\Currency::resourceLoad('XXX');
  }

  // Modify the element.
  $element['#tree'] = TRUE;
  $element['#theme_wrappers'][] = 'form_element';
  $element['#attached']['css'] = array(
    drupal_get_path('module', 'currency') . '/currency.css',
  );

  $signs = array_merge(array($currency->sign), $currency->alternativeSigns);
  $signs = array_combine($signs, $signs);
  $signs = array_unique(array_filter(array_merge(array(
    CURRENCY_SIGN_FORM_ELEMENT_CUSTOM_VALUE => t('- Custom -'),
  ), $signs)));
  asort($signs);
  $element['sign'] = array(
    '#default_value' => $currency->sign,
    '#empty_value' => '',
    '#options' => $signs,
    '#required' => $element['#required'],
    '#title' => t('Sign'),
    '#title_display' => 'invisible',
    '#type' => 'select',
  );
  $sign_js_selector = '.form-type-currency-sign .form-select';
  $element['sign_custom'] = array(
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'currency') . '/currency.css',
      ),
    ),
    '#default_value' => $currency->sign,
    '#states' => array(
      'visible' => array(
        $sign_js_selector => array(
          'value' => CURRENCY_SIGN_FORM_ELEMENT_CUSTOM_VALUE,
        ),
      ),
    ),
    '#title' => t('Custom sign'),
    '#title_display' => 'invisible',
    '#type' => 'textfield',
  );

  return $element;
}

/**
 * Implements form validate callback for a currency_sign element.
 */
function currency_form_currency_sign_validate(array $element, array &$form_state) {
  // Set a scalar value.
  $sign = $element['#value']['sign'];
  if ($sign == CURRENCY_SIGN_FORM_ELEMENT_CUSTOM_VALUE) {
    $sign = $element['#value']['sign_custom'];
  }
  form_set_value($element, $sign, $form_state);
}

/**
 * Implements form process callback for a currency_locale element.
 */
function currency_form_currency_locale_process(array $element, array &$form_state, array &$form) {
  require_once DRUPAL_ROOT . '/includes/iso.inc';

  $locale_language_code = isset($element['#default_value']) ? substr($element['#default_value'], 0, 2) : '';
  $locale_country_code = isset($element['#default_value']) ? substr($element['#default_value'], 3) : '';

  // Modify the element.
  $element['#tree'] = TRUE;
  $element['locale'] = array(
    '#description' => isset($element['#description']) ? $element['#description'] : NULL,
    '#title' => isset($element['#title']) ? $element['#title'] : NULL,
    '#type' => 'fieldset',
  );

  $options = array();
  foreach (_locale_get_predefined_list() as $language_code => $language_data) {
    $options[$language_code] = $language_data[0];
  }
  asort($options);
  $element['locale']['language_code'] = array(
    '#default_value' => $locale_language_code,
    '#empty_value' => '',
    '#options' => $options,
    '#required' => $element['#required'],
    '#title' => t('Language'),
    '#type' => 'select',
  );

  $element['locale']['country_code'] = array(
    '#default_value' => $locale_country_code,
    '#empty_value' => '',
    '#options' => _country_get_predefined_list(),
    '#required' => $element['#required'],
    '#title' => t('Country'),
    '#type' => 'select',
  );

  return $element;
}

/**
 * Implements form validate callback for a currency_locale element.
 */
function currency_form_currency_locale_validate(array $element, array &$form_state) {
  $locale = $element['#value']['locale']['language_code'] . '_' . $locale = $element['#value']['locale']['country_code'];
  form_set_value($element, $locale, $form_state);
}

/**
 * Returns an options list of currencies.
 *
 * @return array
 *  Keys are ISO 4217 codes and values are currency titles.
 */
function currency_options() {
  $options = array();
  foreach (ctools_export_crud_load_all('currency') as $currency) {
    if ($currency->title) {
      $options[$currency->ISO4217Code] = t('@currency_title (@currency_code)', array(
        '@currency_title' => $currency->title,
        '@currency_code' => $currency->ISO4217Code,
      ));
    }
  }
  asort($options);

  return $options;
}

/**
 * Implements Ctools exportable UI edit form callback.
 */
function currency_form_currency(array &$form, array &$form_state) {
  $currency = $form_state['item'];

  $form['info']['ISO4217Code']['#description'] = '';
  $form['info']['ISO4217Code']['#element_validate'] = array('currency_form_element_validate_iso_4217_code');
  $form['info']['ISO4217Code']['#maxlength'] = 3;
  $form['info']['ISO4217Code']['#size'] = 3;

  $form['ISO4217Number'] = array(
    '#default_value' => $currency->ISO4217Number,
    '#element_validate' => array('currency_form_element_validate_iso_4217_number'),
    '#maxlength' => 3,
    '#title' => t('ISO 4217 number'),
    '#type' => 'textfield',
    '#size' => 3,
  );

  $form['title'] = array(
    '#default_value' => $currency->title,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#title' => t('Title'),
    '#type' => 'textfield',
  );

  $form['sign'] = array(
    '#currency_code' => $currency->ISO4217Code,
    '#default_value' => $currency->sign,
    '#title' => t('Sign'),
    '#type' => 'currency_sign',
  );

  $form['minorUnit'] = array(
    '#default_value' => $currency->minorUnit,
    '#element_validate' => array('currency_form_element_validate_numeric'),
    '#maxlength' => 1,
    '#required' => TRUE,
    '#size' => 1,
    '#title' => t('Number of decimals'),
    '#type' => 'textfield',
  );
}

/**
 * Implements Ctools exportable UI edit form callback.
 */
function currency_form_currency_locale_pattern(array &$form, array &$form_state) {
  require_once DRUPAL_ROOT . '/includes/iso.inc';

  $locale_pattern = $form_state['item'];

  $form['info']['locale']['#type'] = 'currency_locale';
  unset($form['info']['locale']['#description']);
  unset($form['info']['locale']['#maxlength']);

  $form['cldr'] = array(
    '#title' => t('Formatting'),
    '#type' => 'fieldset',
  );

  $form['cldr']['pattern'] = array(
    '#default_value' => $locale_pattern->pattern,
    '#description' => t('A Unicode <abbr title="Common Locale Data Repository">CLDR</abbr> <a href="http://cldr.unicode.org/translation/number-patterns">currency number pattern</a>. Non-standard characters are allowed.'),
    '#maxlength' => 255,
    '#required' => TRUE,
    '#title' => t('Pattern'),
    '#type' => 'textfield',
  );

  $form['cldr']['symbol_decimal_separator'] = array(
    '#default_value' => $locale_pattern->symbol_decimal_separator,
    '#maxlength' => 255,
    '#title' => t('Decimal separator'),
    '#type' => 'textfield',
  );

  $form['cldr']['symbol_grouping_separator'] = array(
    '#default_value' => $locale_pattern->symbol_grouping_separator,
    '#maxlength' => 255,
    '#title' => t('Group separator'),
    '#type' => 'textfield',
  );
}

/**
 * Implements Form API #element_validate callback.
 */
function currency_form_element_validate_iso_4217_code(array $element, array $form, array &$form_state) {
  $currency_code = $element['#value'];
  if (!preg_match('/[a-z]{3}/i', $currency_code)) {
    form_error($element, t('The currency code should be three letters.'));
  }
  $currency = ctools_export_crud_load('currency', $currency_code);
  if ($currency) {
    form_error($element, t('The currency code is already in use by !link.', array(
      '!link' => l($currency->title, "admin/config/regional/currency/currency/list/$currency->ISO4217Code/edit"),
    )));
  }
}

/**
 * Implements Form API #element_validate callback.
 */
function currency_form_element_validate_iso_4217_number(array $element, array $form, array &$form_state) {
  if ($element['#value'] && !preg_match('/\d{3}/i', $element['#value'])) {
    form_error($element, t('@title should be three digits.', array(
      '@title' => $element['#title'],
    )));
  }
}

/**
 * Implements Form API #element_validate callback.
 */
function currency_form_element_validate_numeric(array $element, array $form, array &$form_state) {
  if (!is_numeric($element['#value'])) {
    form_error($element, t('@title should be numeric.', array(
      '@title' => $element['#title'],
    )));
  }
}

/**
 * Implements hook_filter_info()'s process callback.
 */
function currency_filter_currency_exchange_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  return preg_replace_callback('/\[currency:([a-z]{3}):([a-z]{3})(.*?)\]/i', '_currency_filter_currency_exchange_process', $text);
}

/**
 * Implements preg_replace_callback() callback.
 */
function _currency_filter_currency_exchange_process(array $matches) {
  $currency_code_from = $matches[1];
  $currency_code_to = $matches[2];
  $amount = str_replace(':', '', $matches[3]);
  if (strlen($amount) !== 0) {
    try {
      $amount = Input::parseAmount($amount);
    }
    // The amount is invalid, so return the token.
    catch (Exception $e) {
      return $matches[0];
    }
  }
  // The amount defaults to 1.
  else {
    $amount = 1;
  }

  if ($rate = CurrencyConverter::load($currency_code_from, $currency_code_to)) {
    return $amount * $rate;
  }
  // The filter failed, so return the token.
  return $matches[0];
}

/**
 * Implements hook_filter_info()'s tips callback.
 */
function currency_filter_currency_exchange_tips($filter, $format, $long) {
  return t('Use <code>[currency:from:to:amount]</code> to convert an amount of money from one currency to another. The <code>amount</code> parameter is optional and defaults to <code>1</code>. Example: <code>[currency:EUR:USD:100]</code>.');
}


/**
 * Implements hook_filter_info()'s process callback.
 */
function currency_filter_currency_localize_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  return preg_replace_callback('/\[currency-localize:([a-z]{3}):(.+?)\]/i', '_currency_filter_currency_localize_process', $text);
}

/**
 * Implements preg_replace_callback() callback.
 */
function _currency_filter_currency_localize_process(array $matches) {
  $currency_code = $matches[1];
  try {
    $amount = Input::parseAmount($matches[2]);
  }
  // The amount is invalid, so return the token.
  catch (Exception $e) {
    return $matches[0];
  }
  ctools_include('export');
  $currency = ctools_export_crud_load('currency', $currency_code);
  if ($currency) {
    return $currency->format($amount);
  }
  // The currency code is invalid, so return the token.
  return $matches[0];
}

/**
 * Implements hook_filter_info()'s tips callback.
 */
function currency_filter_currency_localize_tips($filter, $format, $long) {
  return t('Use <code>[currency-localize:<strong>currency-code</strong>:<strong>amount</strong>]</code> to localize an amount of money. The <code>currency-code</code> and <code>amount</code> parameters are the ISO 4217 currency code and the actual amount to display. Example: <code>[currency-localize:EUR:99.95]</code>.');
}
