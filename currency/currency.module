<?php

/**
 * @file
 * Provides currency information and allows users to add custom currencies.
 */

use Drupal\currency\Entity\Currency;
use Drupal\Component\Utility\NestedArray;

/**
 * The value for the currency_sign form element's "custom" option.
 */
define('CURRENCY_SIGN_FORM_ELEMENT_CUSTOM_VALUE', '###CUSTOM###');

/**
 * Implements hook_menu().
 */
function currency_menu() {
  return \Drupal::service('currency.hook.menu')->invoke();
}

/**
 * Implements hook_element_info().
 */
function currency_element_info() {
  return \Drupal::service('currency.hook.element_info')->invoke();
}

/**
 * Implements hook_permission().
 */
function currency_permission() {
  return \Drupal::service('currency.hook.permission')->invoke();
}

/**
 * Implements form process callback for a currency_amount element.
 */
function currency_form_currency_amount_process(array $element, array &$form_state, array &$form) {
  // Validate element configuration.
  if ($element['#minimum_amount'] !== FALSE && !is_numeric($element['#minimum_amount'])) {
    throw new RuntimeException('The minimum amount must be a number.');
  }
  if ($element['#maximum_amount'] !== FALSE && !is_numeric($element['#maximum_amount'])) {
    throw new RuntimeException('The maximum amount must be a number.');
  }
  if ($element['#limit_currency_codes']
    && $element['#default_value']['currency_code']
    && !in_array($element['#default_value']['currency_code'], $element['#limit_currency_codes'])) {
    throw new \InvalidArgumentException('The default currency is not in the list of allowed currencies.');
  }

  // Load the default currency.
  /** @var \Drupal\currency\Entity\CurrencyInterface $currency */
  $currency = NULL;
  if ($element['#default_value']['currency_code']) {
    $currency = entity_load('currency', $element['#default_value']['currency_code']);
  }
  if(!$currency) {
    $currency = entity_load('currency', 'XXX');
  }

  // Modify the element.
  $element['#tree'] = TRUE;
  $element['#theme_wrappers'][] = 'form_element';
  $element['#attached']['css'] = array(
    drupal_get_path('module', 'currency') . '/currency.css',
  );

  // Add the currency element.
  if (count($element['#limit_currency_codes']) == 1) {
    $element['currency_code'] = array(
      '#value' => reset($element['#limit_currency_codes']),
      '#type' => 'value',
    );
  }
  else {
    $element['currency_code'] = array(
      '#default_value' => $currency->id(),
      '#type' => 'select',
      '#title' => t('Currency'),
      '#title_display' => 'invisible',
      '#options' => $element['#limit_currency_codes'] ? array_intersect_key(Currency::options(), $element['#limit_currency_codes']) : Currency::options(),
      '#required' => $element['#required'],
    );
  }

  // Add the amount element.
  $description = NULL;
  if ($element['#minimum_amount'] !== FALSE) {
    $description = t('The minimum amount is !amount.', array(
      '!amount' => $currency->formatAmount($element['#minimum_amount']),
    ));
  }
  $element['amount'] = array(
    '#default_value' => $element['#default_value']['amount'],
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#title_display' => 'invisible',
    '#description' => $description,
    '#prefix' => count($element['#limit_currency_codes']) == 1 ? $currency->getSign() : NULL,
    '#required' => $element['#required'],
    '#size' => 9,
  );

  return $element;
}

/**
 * Implements form validate callback for a currency_amount element.
 */
function currency_form_currency_amount_validate(array $element, array &$form_state) {
  $value = NestedArray::getValue($form_state['values'], $element['#parents']);
  $amount = $value['amount'];
  $currency_code = $value['currency_code'];

  // Confirm that the amount is numeric.
  $amount = \Drupal::service('currency.input')->parseAmount($amount);
  if ($amount === FALSE) {
    \Drupal::formBuilder()->setError($element['amount'], $form_state, t('%title is not numeric.', array(
      '%title' => $element['#title'],
    )));
  }

  // Confirm the amount lies within the allowed range.
  /** @var \Drupal\currency\Entity\CurrencyInterface $currency */
  $currency = entity_load('currency', $currency_code);
  if ($element['#minimum_amount'] !== FALSE && bccomp($element['#minimum_amount'], $amount) == 1) {
    \Drupal::formBuilder()->setError($element['amount'], $form_state, t('The minimum amount is !amount.', array(
      '!amount' => $currency->formatAmount($element['#minimum_amount']),
    )));
  }
  elseif ($element['#maximum_amount'] !== FALSE && bccomp($amount, $element['#maximum_amount']) == 1) {
    \Drupal::formBuilder()->setError($element['amount'], $form_state, t('The maximum amount is !amount.', array(
      '!amount' => $currency->formatAmount($element['#maximum_amount']),
    )));
  }

  // The amount in $form_state is a human-readable, optionally localized
  // string, which cannot be used by other code. $amount is a numeric string
  // after running it through \Drupal::service('currency.input')->parseAmount().
  form_set_value($element, array(
    'amount' => $amount,
    'currency_code' => $currency_code,
  ), $form_state);
}

/**
 * Implements form process callback for a currency_sign element.
 */
function currency_form_currency_sign_process(array $element, array &$form_state, array &$form) {
  /** @var \Drupal\currency\Entity\CurrencyInterface $currency */
  $currency = NULL;
  if ($element['#currency_code']) {
    $currency = entity_load('currency', $element['#currency_code']);
  }
  if (!$currency) {
    $currency = entity_load('currency', 'XXX');
  }

  // Modify the element.
  $element['#tree'] = TRUE;
  $element['#theme_wrappers'][] = 'form_element';
  $element['#attached']['css'] = array(
    drupal_get_path('module', 'currency') . '/currency.css',
  );

  $signs = array_merge(array($currency->getSign()), $currency->getAlternativeSigns());
  $signs = array_combine($signs, $signs);
  $signs = array_unique(array_filter(array_merge(array(
    CURRENCY_SIGN_FORM_ELEMENT_CUSTOM_VALUE => t('- Custom -'),
  ), $signs)));
  asort($signs);
  $element['sign'] = array(
    '#default_value' => in_array($element['#default_value'], $signs) ? $element['#default_value'] : CURRENCY_SIGN_FORM_ELEMENT_CUSTOM_VALUE,
    '#empty_value' => '',
    '#options' => $signs,
    '#required' => $element['#required'],
    '#title' => t('Sign'),
    '#title_display' => 'invisible',
    '#type' => 'select',
  );
  $sign_js_selector = '.form-type-currency-sign .form-select';
  $element['sign_custom'] = array(
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'currency') . '/currency.css',
      ),
    ),
    '#default_value' => $element['#default_value'],
    '#states' => array(
      'visible' => array(
        $sign_js_selector => array(
          'value' => CURRENCY_SIGN_FORM_ELEMENT_CUSTOM_VALUE,
        ),
      ),
    ),
    '#title' => t('Custom sign'),
    '#title_display' => 'invisible',
    '#type' => 'textfield',
  );

  return $element;
}

/**
 * Implements form validate callback for a currency_sign element.
 */
function currency_form_currency_sign_validate(array $element, array &$form_state, array $form) {
  // Set a scalar value.
  $sign = $element['#value']['sign'];
  if ($sign == CURRENCY_SIGN_FORM_ELEMENT_CUSTOM_VALUE) {
    $sign = $element['#value']['sign_custom'];
  }
  \Drupal::formBuilder()->setValue($element, $sign, $form_state);
}

/**
 * Implements Form API #element_validate callback.
 */
function currency_form_element_validate_iso_4217_code(array $element, array &$form_state, array $form) {
  $currency_code = $element['#value'];
  if (!preg_match('/[a-z]{3}/i', $currency_code)) {
    \Drupal::formBuilder()->setError($element, $form_state, t('The currency code must be three letters.'));
  }
  if ($element['#default_value'] !== $element['#value']) {
    $currency = entity_load('currency', $currency_code);
    if ($currency) {
      \Drupal::formBuilder()->setError($element, $form_state, t('The currency code is already in use by !link.', array(
        '!link' => l($currency->label(), 'admin/config/regional/currency/' . $currency->id() . '/edit'),
      )));
    }
  }
}

/**
 * Implements Form API #element_validate callback.
 */
function currency_form_element_validate_iso_4217_number(array $element, array &$form_state, array $form) {
  if ($element['#value'] && !preg_match('/\d{3}/i', $element['#value'])) {
    \Drupal::formBuilder()->setError($element, $form_state, t('@title must be three digits.', array(
      '@title' => $element['#title'],
    )));
  }
}
