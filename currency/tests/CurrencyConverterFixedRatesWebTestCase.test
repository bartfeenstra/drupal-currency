<?php

/**
 * @file
 * Contains class CurrencyConverterFixedRatesWebTestCase.
 */

/**
 * Tests CurrencyConverterFixedRates.
 */
class CurrencyConverterFixedRatesWebTestCase extends DrupalWebTestCase {

  /**
   * Implements DrupalTestCase::getInfo().
   */
  static function getInfo() {
    return array(
      'name' => 'CurrencyConverterFixedRates',
      'group' => 'Currency',
    );
  }

  /**
   * Overrides parent::setUp().
   */
  function setUp(array $modules = array()) {
    $this->profile = 'testing';
    parent::setUp($modules + array('currency'));
  }

  /**
   * Test currency conversion.
   */
  function testCurrencyConverterFixedRates() {
    // Test CurrencyConverterFixedRates::save().
    CurrencyConverterFixedRates::save('EUR', 'NLG', 5);
    CurrencyConverterFixedRates::save('EUR', 'UAH', 7);

    // Test CurrencyConverterFixedRates::load().
    // Test an available conversion rate.
    $this->assertEqual(CurrencyConverterFixedRates::load('EUR', 'NLG'), 5);
    // Test an unavailable conversion rate for which the reverse rate is
    // available.
    $this->assertEqual(CurrencyConverterFixedRates::load('NLG', 'EUR'), 0.2);
    // Test an unavailable conversion rate for no the reverse rate is
    // available.
    $this->assertFalse(CurrencyConverterFixedRates::load('NLG', 'XXX'));

    // Test CurrencyConverterFixedRates::loadMultiple().
    $rates = CurrencyConverterFixedRates::loadMultiple(array(
      'EUR' => array('NLG', 'XXX'),
      'NLG' => array('EUR'),
    ));
    // Test an available conversion rate.
    $this->assertTrue(isset($rates['EUR']));
    $this->assertTrue(isset($rates['EUR']['NLG']));
    $this->assertEqual($rates['EUR']['NLG'], 5);
    // Test an unavailable conversion rate for which the reverse rate is
    // available.
    $this->assertTrue(isset($rates['NLG']));
    $this->assertTrue(isset($rates['NLG']['EUR']));
    $this->assertEqual($rates['NLG']['EUR'], 0.2);
    // Test an unavailable conversion rate for which the no rate is
    // available.
    $this->assertTrue(isset($rates['EUR']));
    $this->assertTrue(isset($rates['EUR']['XXX']));
    $this->assertFalse($rates['EUR']['XXX']);

    // Test CurrencyConverterFixedRates::delete().
    CurrencyConverterFixedRates::delete('EUR', 'NLG');
    // Test the deleted conversion rate.
    $this->assertFalse(CurrencyConverterFixedRates::load('EUR', 'NLG'));
    // Test the reverse of the deleted conversion rate.
    $this->assertFalse(CurrencyConverterFixedRates::load('NLG', 'EUR'));
    // Test an available conversion rate.
    $this->assertEqual(CurrencyConverterFixedRates::load('EUR', 'UAH'), 7);
  }
}