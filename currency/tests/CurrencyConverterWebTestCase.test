<?php

/**
 * @file
 * Contains class CurrencyConverterWebTestCase.
 */

/**
 * Tests CurrencyConverter.
 */
class CurrencyConverterWebTestCase extends DrupalWebTestCase {

  /**
   * Implements DrupalTestCase::getInfo().
   */
  static function getInfo() {
    return array(
      'name' => 'CurrencyConverter',
      'group' => 'Currency',
    );
  }

  /**
   * Overrides parent::setUp().
   */
  function setUp(array $modules = array()) {
    $this->profile = 'testing';
    parent::setUp($modules + array('currency'));
  }

  /**
   * Test currency conversion.
   *
   * We use CurrencyConverterBartFeenstraCurrency to test some functionality,
   * which means that if this test fails, the problem may be caused by
   * CurrencyConverterBartFeenstraCurrency.
   *
   * @see CurrencyConverterBartFeenstraCurrency
   */
  function testCurrencyConverter() {
    // Test default configuration.
    $this->assertCurrencyConversionRates();
    $this->assertIdenticalCurrencyConversionRates();

    // Test a configuration with explicitly enabled converters.
    CurrencyConverter::saveConfiguration(array(
      'CurrencyConverterFixedRates' => TRUE,
      'CurrencyConverterBartFeenstraCurrency' => TRUE,
    ));
    $this->assertCurrencyConversionRates();
    $this->assertIdenticalCurrencyConversionRates();

    // Test a configuration with explicitly disabled converters.
    CurrencyConverter::saveConfiguration(array(
      'CurrencyConverterBartFeenstraCurrency' => FALSE,
      'CurrencyConverterFixedRates' => FALSE,
    ));
    $this->assertFalse(count(CurrencyConverter::loadConverters()));
    $this->assertIdenticalCurrencyConversionRates();
    
  }

  /**
   * Asserts that conversion rates can be retrieved.
   *
   * This function expects CurrencyConverterFixedRates and
   * CurrencyConverterBartFeenstraCurrency to be enabled in that order.
   */
  function assertCurrencyConversionRates() {
    $converters = CurrencyConverter::loadConverters();
    $this->assertEqual(CurrencyConverter::loadConverters(), array('CurrencyConverterFixedRates', 'CurrencyConverterBartFeenstraCurrency'));

    // Make sure the first converter has a rate on EUR>NLG, so it has
    // priority over the second converter's rate for these currencies.
    CurrencyConverterFixedRates::save('EUR', 'NLG', 7);

    // Test CurrencyConverter::load().
    $this->assertEqual(CurrencyConverter::load('EUR', 'NLG'), 7);
    $this->assertEqual(CurrencyConverter::load('EUR', 'DEM'), 1.95583);
    $this->assertFalse(CurrencyConverter::load('EUR', 'XXX'));

    // Test CurrencyConverter::loadMultiple().
    $rates = CurrencyConverter::loadMultiple(array(
      'EUR' => array('NLG', 'DEM', 'XXX'),
    ));
    $this->assertTrue(isset($rates['EUR']));
    $this->assertTrue(isset($rates['EUR']['NLG']));
    $this->assertEqual($rates['EUR']['NLG'], 7);
    $this->assertTrue(isset($rates['EUR']['DEM']));
    $this->assertEqual($rates['EUR']['DEM'], 1.95583);
    $this->assertTrue(isset($rates['EUR']['XXX']));
    $this->assertFalse($rates['EUR']['XXX']);
  }

  /**
   * Assert sthat conversion rates for identical currencies can be retrieved.
   */
  function assertIdenticalCurrencyConversionRates() {
    // Test CurrencyConverter::load().
    $this->assertEqual(CurrencyConverter::load('EUR', 'EUR'), 1);

    // Test CurrencyConverter::loadMultiple().
    $rates = CurrencyConverter::loadMultiple(array(
      'EUR' => array('EUR'),
    ));
    $this->assertTrue(isset($rates['EUR']));
    $this->assertTrue(isset($rates['EUR']['EUR']));
    $this->assertEqual($rates['EUR']['EUR'], 1);
  }
}
